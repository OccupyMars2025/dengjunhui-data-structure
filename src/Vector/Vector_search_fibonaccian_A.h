/******************************************************************************************
 * Data Structures in C++
 * ISBN: 7-302-33064-6 & 7-302-33065-3 & 7-302-29652-2 & 7-302-26883-3
 * Junhui DENG, deng@tsinghua.edu.cn
 * Computer Science & Technology, Tsinghua University
 * Copyright (c) 2003-2023. All rights reserved.
 ******************************************************************************************/

#pragma once
#include "fibonacci/Fib.h" //引入Fib数列类

//Fibonacci查找算法（版本A）：在有序向量的区间[lo, hi)内查找元素e，0 <= lo <= hi <= _size
template <typename T> 
static Rank fibSearch( T* S, T const& e, Rank lo, Rank hi ) {
   printf ( "FIB search (A)\n" );
   //用O(log_phi(n = hi - lo)时间创建Fib数列
   for ( Fib fib( hi - lo ); lo < hi; ) { //Fib制表备查；此后每步迭代仅一次比较、两个分支
      for ( Rank i = 0; i < lo; i++ ) {
         printf ( "     " ); 
      }
      if ( lo >= 0 ) {
         for ( Rank i = lo; i < hi; i++ ) {
            printf ( "....^" );
         } 
      }
      // printf ( "<<<<|" ); 
      printf ( "\n" );
      
      //key point: make sure (fib(k)-1)+1 <= vector size
      while ( hi - lo < fib.get() ) fib.prev(); //自后向前顺序查找（分摊O(1)）
      Rank mi = lo + fib.get() - 1; //确定形如Fib(k)-1的轴点
      if      ( e < S[mi] ) hi = mi; //深入前半段[lo, mi)继续查找
      else if ( S[mi] < e ) lo = mi + 1; //深入后半段(mi, hi)继续查找
      else                  return mi; //在mi处命中
      
      if ( lo >= hi ) { 
         for ( int i = 0; i < mi; i++ ) {
            printf ( "     " );
         } 
         if ( mi >= 0 ) printf ( "....|\n" ); 
         else printf ( "<<<<|\n" ); 
      }
   } //一旦找到，随即终止

   return -1; //查找失败
} //有多个命中元素时，不能保证返回秩最大者；失败时，简单地返回-1，而不能指示失败的位置


// template <typename T> 
// static Rank fibSearch( T* S, T const& e, Rank lo, Rank hi ) {
//    printf("src/Vector/Vector_search_fibonaccian_A.h  v001\n");

//    Fib fibonacci(hi - lo);

//    while (lo < hi)
//    {
//       while (hi - lo < fibonacci.get())
//       {
//          fibonacci.prev();
//       }
//       Rank middle = lo + fibonacci.get() - 1;
//       if (e < S[middle]) {
//          hi = middle;
//       } else if (S[middle] < e) {
//          lo = middle + 1;
//       } else {
//          return middle;
//       }
//    }
   
//    return -1;
// }