# generated by ChatGPT 3.5 
# 2023/12/31: It's beautiful, time complexity: O(log(n))

def multiply_matrices(matrix1, matrix2):
    a = matrix1[0][0] * matrix2[0][0] + matrix1[0][1] * matrix2[1][0]
    b = matrix1[0][0] * matrix2[0][1] + matrix1[0][1] * matrix2[1][1]
    c = matrix1[1][0] * matrix2[0][0] + matrix1[1][1] * matrix2[1][0]
    d = matrix1[1][0] * matrix2[0][1] + matrix1[1][1] * matrix2[1][1]

    return [[a, b], [c, d]]

def power(matrix, n):
    result = [[1, 0], [0, 1]]  # Identity matrix

    while n > 0:
        if n % 2 == 1:
            result = multiply_matrices(result, matrix)
        matrix = multiply_matrices(matrix, matrix)
        n //= 2  # Here is where O(log(n)) comes from

    return result


def fibonacci(n):
    if n <= 1:
        return n
    matrix = [[1, 1], [1, 0]]
    result_matrix = power(matrix, n - 1)
    return result_matrix[0][0]


# Example usage:
for n in range(0, 100):
    result = fibonacci(n)
    print(f"fibonacci({n}): {result}")
